<?php

namespace common\models;

use Yii;

/**
 * @property int $id
 * @property string|null $name
 * @property string|null $slug
 * @property int|null $active
 *
 * @property ProductKeyword[] $productKeywords
 */
class Keyword extends \yii\db\ActiveRecord
{
    public static function tableName()
    {
        return 'keyword';
    }

    public function rules()
    {
        return [
            [['name'], 'duplicateAttribute'],
            [['name'], 'required', 'message' => '{attribute} không được để trống'],
            [['name', 'slug'], 'string', 'max' => 50],
            [['active'], 'integer'],
        ];
    }

    public function duplicateAttribute($attribute, $params)
    {
        if (!$this->hasErrors()) {
            $user = self::find()->andFilterWhere(["{$attribute}" => $this->$attribute])
                ->andFilterWhere(['active' => myAPI::ACTIVE]);
            if(!$this->isNewRecord){
                $user->andFilterWhere(['<>', 'id', $this->id]);
            }

            if(!is_null($user->one())){
                $this->addError($attribute, "{$this->getAttributeLabel($attribute)} đã tồn tại");
            }
        }
    }

    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'name' => 'Tên',
            'slug' => 'Slug',
            'active' => 'Active',
        ];
    }

    public function getProductKeywords()
    {
        return $this->hasMany(ProductKeyword::className(), ['keyword_id' => 'id']);
    }

    public function beforeSave($insert)
    {
        $this->slug = myAPI::createCode($this->name);
        if ($insert) {
            $this->active = myAPI::ACTIVE;
        }

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }
}
